/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface CwButton {
    'buttonText': string;
    'disabled': boolean;
    'type': 'submit' | 'button' | 'reset';
  }
  interface CwButtonAttributes extends StencilHTMLAttributes {
    'buttonText'?: string;
    'disabled'?: boolean;
    'onOnCwReset'?: (event: CustomEvent) => void;
    'onOnCwSubmit'?: (event: CustomEvent) => void;
    'type'?: 'submit' | 'button' | 'reset';
  }

  interface CwCard {
    'complete': boolean;
  }
  interface CwCardAttributes extends StencilHTMLAttributes {
    'complete'?: boolean;
  }

  interface CwForm {
    'action': string;
    'method': string;
    'reset': () => void;
  }
  interface CwFormAttributes extends StencilHTMLAttributes {
    'action'?: string;
    'method'?: string;
    'onCwFormSubmit'?: (event: CustomEvent) => void;
  }

  interface CwTextInput {
    'catType': string;
    'color': 'pink' | 'blue' | 'purple';
    'disabled': boolean;
    'id': string;
    'maxlength': number;
    'name': string;
    'pattern': string;
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'reset': () => void;
    'setFocus': () => void;
    'type': string;
    'validate': () => boolean;
    'value': string;
  }
  interface CwTextInputAttributes extends StencilHTMLAttributes {
    'catType'?: string;
    'color'?: 'pink' | 'blue' | 'purple';
    'disabled'?: boolean;
    'id'?: string;
    'maxlength'?: number;
    'name'?: string;
    'onCwBlur'?: (event: CustomEvent) => void;
    'onCwChange'?: (event: CustomEvent) => void;
    'onCwFocus'?: (event: CustomEvent) => void;
    'onCwInput'?: (event: CustomEvent) => void;
    'onInputStateChanged'?: (event: CustomEvent) => void;
    'pattern'?: string;
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'type'?: string;
    'value'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CwButton': Components.CwButton;
    'CwCard': Components.CwCard;
    'CwForm': Components.CwForm;
    'CwTextInput': Components.CwTextInput;
  }

  interface StencilIntrinsicElements {
    'cw-button': Components.CwButtonAttributes;
    'cw-card': Components.CwCardAttributes;
    'cw-form': Components.CwFormAttributes;
    'cw-text-input': Components.CwTextInputAttributes;
  }


  interface HTMLCwButtonElement extends Components.CwButton, HTMLStencilElement {}
  var HTMLCwButtonElement: {
    prototype: HTMLCwButtonElement;
    new (): HTMLCwButtonElement;
  };

  interface HTMLCwCardElement extends Components.CwCard, HTMLStencilElement {}
  var HTMLCwCardElement: {
    prototype: HTMLCwCardElement;
    new (): HTMLCwCardElement;
  };

  interface HTMLCwFormElement extends Components.CwForm, HTMLStencilElement {}
  var HTMLCwFormElement: {
    prototype: HTMLCwFormElement;
    new (): HTMLCwFormElement;
  };

  interface HTMLCwTextInputElement extends Components.CwTextInput, HTMLStencilElement {}
  var HTMLCwTextInputElement: {
    prototype: HTMLCwTextInputElement;
    new (): HTMLCwTextInputElement;
  };

  interface HTMLElementTagNameMap {
    'cw-button': HTMLCwButtonElement
    'cw-card': HTMLCwCardElement
    'cw-form': HTMLCwFormElement
    'cw-text-input': HTMLCwTextInputElement
  }

  interface ElementTagNameMap {
    'cw-button': HTMLCwButtonElement;
    'cw-card': HTMLCwCardElement;
    'cw-form': HTMLCwFormElement;
    'cw-text-input': HTMLCwTextInputElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
